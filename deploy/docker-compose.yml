version: '3.9'

services:
  ride_sharing_pg:
    image: postgres
    container_name: ride_sharing_pg
    environment:
      POSTGRES_USER: ride
      POSTGRES_PASSWORD: ridepass
      POSTGRES_DB: ride_db
    ports:
      - '5432:5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ride -d ride_db']
      interval: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persistent volume for Postgres

  migrate:
    build:
      context: ..
      dockerfile: migrate/Dockerfile
    container_name: migrate
    depends_on:
      ride_sharing_pg:
        condition: service_healthy
    env_file:
      - .env
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - '5672:5672' # AMQP
      - '15672:15672' # Management UI (guest/guest)
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', 'ping']
      interval: 5s
      retries: 5
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq # Ephemeral (reset on rebuild)

  booking_svc:
    build:
      context: ..
      dockerfile: booking_svc/Dockerfile
    container_name: booking_svc
    depends_on:
      ride_sharing_pg:
        condition: service_healthy
      migrate:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env
    environment:
      APP_ENV: development
      SERVICE_PORT: '8080'
    ports:
      - '8080:8080'

  driver_svc:
    build:
      context: ..
      dockerfile: driver_svc/Dockerfile
    container_name: driver_svc
    depends_on:
      ride_sharing_pg:
        condition: service_healthy
      migrate:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env
    environment:
      APP_ENV: development
      SERVICE_PORT: '8081'
    ports:
      - '8081:8081'

volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local
