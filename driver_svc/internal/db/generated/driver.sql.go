// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: driver.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getDriverByID = `-- name: GetDriverByID :one
SELECT driver_id, name, available, created_at FROM driver.drivers
WHERE driver_id = $1
`

func (q *Queries) GetDriverByID(ctx context.Context, driverID pgtype.UUID) (DriverDriver, error) {
	row := q.db.QueryRow(ctx, getDriverByID, driverID)
	var i DriverDriver
	err := row.Scan(
		&i.DriverID,
		&i.Name,
		&i.Available,
		&i.CreatedAt,
	)
	return i, err
}

const getDrivers = `-- name: GetDrivers :many
SELECT driver_id, name, available, created_at FROM driver.drivers
`

func (q *Queries) GetDrivers(ctx context.Context) ([]DriverDriver, error) {
	rows, err := q.db.Query(ctx, getDrivers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DriverDriver
	for rows.Next() {
		var i DriverDriver
		if err := rows.Scan(
			&i.DriverID,
			&i.Name,
			&i.Available,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDriver = `-- name: UpdateDriver :exec
UPDATE driver.jobs
SET driver_id = $1, ride_status = $2
WHERE booking_id = $3
`

type UpdateDriverParams struct {
	DriverID   pgtype.UUID
	RideStatus string
	BookingID  pgtype.UUID
}

func (q *Queries) UpdateDriver(ctx context.Context, arg UpdateDriverParams) error {
	_, err := q.db.Exec(ctx, updateDriver, arg.DriverID, arg.RideStatus, arg.BookingID)
	return err
}

const updateDriverStatus = `-- name: UpdateDriverStatus :exec
UPDATE driver.drivers
SET available = $2
WHERE driver_id = $1
`

type UpdateDriverStatusParams struct {
	DriverID  pgtype.UUID
	Available bool
}

func (q *Queries) UpdateDriverStatus(ctx context.Context, arg UpdateDriverStatusParams) error {
	_, err := q.db.Exec(ctx, updateDriverStatus, arg.DriverID, arg.Available)
	return err
}
