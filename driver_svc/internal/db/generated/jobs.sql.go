// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: jobs.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createJob = `-- name: CreateJob :one
INSERT INTO jobs (job_id, booking_id, driver_id, job_status)
VALUES ($1, $2, $3, $4)
RETURNING job_id, booking_id, driver_id, job_status, created_at, updated_at
`

type CreateJobParams struct {
	JobID     pgtype.UUID
	BookingID pgtype.UUID
	DriverID  pgtype.UUID
	JobStatus string
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) (Job, error) {
	row := q.db.QueryRow(ctx, createJob,
		arg.JobID,
		arg.BookingID,
		arg.DriverID,
		arg.JobStatus,
	)
	var i Job
	err := row.Scan(
		&i.JobID,
		&i.BookingID,
		&i.DriverID,
		&i.JobStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllJobs = `-- name: GetAllJobs :many
SELECT job_id, booking_id, driver_id, job_status, created_at, updated_at FROM jobs
`

func (q *Queries) GetAllJobs(ctx context.Context) ([]Job, error) {
	rows, err := q.db.Query(ctx, getAllJobs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Job
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.JobID,
			&i.BookingID,
			&i.DriverID,
			&i.JobStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getJobByBookingId = `-- name: GetJobByBookingId :one
SELECT job_id, booking_id, driver_id, job_status, created_at, updated_at FROM jobs
WHERE booking_id = $1
`

func (q *Queries) GetJobByBookingId(ctx context.Context, bookingID pgtype.UUID) (Job, error) {
	row := q.db.QueryRow(ctx, getJobByBookingId, bookingID)
	var i Job
	err := row.Scan(
		&i.JobID,
		&i.BookingID,
		&i.DriverID,
		&i.JobStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
