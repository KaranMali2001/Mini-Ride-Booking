// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: booking.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBooking = `-- name: CreateBooking :one
INSERT INTO booking.bookings (
     pickuploc_lat, pickuploc_lng, dropoff_lat, dropoff_lng, price, ride_status, driver_id
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING booking_id, pickuploc_lat, pickuploc_lng, dropoff_lat, dropoff_lng, price, ride_status, driver_id, created_at
`

type CreateBookingParams struct {
	PickuplocLat float64
	PickuplocLng float64
	DropoffLat   float64
	DropoffLng   float64
	Price        int32
	RideStatus   string
	DriverID     pgtype.UUID
}

func (q *Queries) CreateBooking(ctx context.Context, arg CreateBookingParams) (BookingBooking, error) {
	row := q.db.QueryRow(ctx, createBooking,
		arg.PickuplocLat,
		arg.PickuplocLng,
		arg.DropoffLat,
		arg.DropoffLng,
		arg.Price,
		arg.RideStatus,
		arg.DriverID,
	)
	var i BookingBooking
	err := row.Scan(
		&i.BookingID,
		&i.PickuplocLat,
		&i.PickuplocLng,
		&i.DropoffLat,
		&i.DropoffLng,
		&i.Price,
		&i.RideStatus,
		&i.DriverID,
		&i.CreatedAt,
	)
	return i, err
}

const getAllBookings = `-- name: GetAllBookings :many
SELECT booking_id, pickuploc_lat, pickuploc_lng, dropoff_lat, dropoff_lng, price, ride_status, driver_id, created_at FROM booking.bookings
ORDER BY created_at DESC
`

func (q *Queries) GetAllBookings(ctx context.Context) ([]BookingBooking, error) {
	rows, err := q.db.Query(ctx, getAllBookings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BookingBooking
	for rows.Next() {
		var i BookingBooking
		if err := rows.Scan(
			&i.BookingID,
			&i.PickuplocLat,
			&i.PickuplocLng,
			&i.DropoffLat,
			&i.DropoffLng,
			&i.Price,
			&i.RideStatus,
			&i.DriverID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookingByID = `-- name: GetBookingByID :one
SELECT booking_id, pickuploc_lat, pickuploc_lng, dropoff_lat, dropoff_lng, price, ride_status, driver_id, created_at FROM booking.bookings
WHERE booking_id = $1
`

func (q *Queries) GetBookingByID(ctx context.Context, bookingID pgtype.UUID) (BookingBooking, error) {
	row := q.db.QueryRow(ctx, getBookingByID, bookingID)
	var i BookingBooking
	err := row.Scan(
		&i.BookingID,
		&i.PickuplocLat,
		&i.PickuplocLng,
		&i.DropoffLat,
		&i.DropoffLng,
		&i.Price,
		&i.RideStatus,
		&i.DriverID,
		&i.CreatedAt,
	)
	return i, err
}

const updateBookingStatus = `-- name: UpdateBookingStatus :exec
UPDATE booking.bookings
SET ride_status = $2, driver_id = $3
WHERE booking_id = $1
`

type UpdateBookingStatusParams struct {
	BookingID  pgtype.UUID
	RideStatus string
	DriverID   pgtype.UUID
}

func (q *Queries) UpdateBookingStatus(ctx context.Context, arg UpdateBookingStatusParams) error {
	_, err := q.db.Exec(ctx, updateBookingStatus, arg.BookingID, arg.RideStatus, arg.DriverID)
	return err
}
